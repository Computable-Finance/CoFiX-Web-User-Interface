/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NestPriceFacadeInterface extends ethers.utils.Interface {
  functions: {
    "_governance()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "update(address)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "setAddressFlag(address,uint256)": FunctionFragment;
    "getAddressFlag(address)": FunctionFragment;
    "setNestQuery(address,address)": FunctionFragment;
    "getNestQuery(address)": FunctionFragment;
    "setNTokenAddress(address,address)": FunctionFragment;
    "getNTokenAddress(address)": FunctionFragment;
    "getTokenFee(address)": FunctionFragment;
    "settle(address)": FunctionFragment;
    "triggeredPrice(address)": FunctionFragment;
    "triggeredPriceInfo(address,address)": FunctionFragment;
    "findPrice(address,uint256)": FunctionFragment;
    "latestPrice(address)": FunctionFragment;
    "lastPriceList(address,uint256,address)": FunctionFragment;
    "latestPriceAndTriggeredPriceInfo(address)": FunctionFragment;
    "triggeredPrice2(address)": FunctionFragment;
    "triggeredPriceInfo2(address,address)": FunctionFragment;
    "latestPrice2(address,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_governance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "update", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        singleFee: BigNumberish;
        doubleFee: BigNumberish;
        normalFlag: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setAddressFlag",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddressFlag",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNestQuery",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNestQuery",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNTokenAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTokenFee", values: [string]): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "triggeredPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPriceInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "findPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "latestPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPriceList",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPriceAndTriggeredPriceInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPrice2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPriceInfo2",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice2",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAddressFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAddressFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNestQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNestQuery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTokenFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPriceAndTriggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPrice2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPriceInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice2",
    data: BytesLike
  ): Result;

  events: {};
}

export class NestPriceFacade extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NestPriceFacadeInterface;

  functions: {
    _governance(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        singleFee: BigNumberish;
        doubleFee: BigNumberish;
        normalFlag: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, number] & {
          singleFee: number;
          doubleFee: number;
          normalFlag: number;
        }
      ]
    >;

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getAddressFlag(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNestQuery(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTokenFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "triggeredPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    "findPrice(address,uint256)"(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "findPrice(address,uint256,address)"(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "latestPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "latestPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lastPriceList(address,uint256,address)"(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lastPriceList(address,uint256)"(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    "latestPriceAndTriggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber;
        latestPriceValue: BigNumber;
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    "latestPriceAndTriggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    "triggeredPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPriceInfo2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "triggeredPriceInfo2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
        ntokenAvgPrice: BigNumber;
        ntokenSigmaSQ: BigNumber;
      }
    >;

    "latestPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "latestPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;
  };

  _governance(overrides?: CallOverrides): Promise<string>;

  initialize(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      singleFee: BigNumberish;
      doubleFee: BigNumberish;
      normalFlag: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number] & {
      singleFee: number;
      doubleFee: number;
      normalFlag: number;
    }
  >;

  setAddressFlag(
    addr: string,
    flag: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  setNestQuery(
    tokenAddress: string,
    nestQueryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNestQuery(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setNTokenAddress(
    tokenAddress: string,
    ntokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNTokenAddress(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getTokenFee(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  settle(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPrice(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  "triggeredPrice(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPriceInfo(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPriceInfo(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      avgPrice: BigNumber;
      sigmaSQ: BigNumber;
    }
  >;

  "findPrice(address,uint256)"(
    tokenAddress: string,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  "findPrice(address,uint256,address)"(
    tokenAddress: string,
    height: BigNumberish,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "latestPrice(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  "latestPrice(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lastPriceList(address,uint256,address)"(
    tokenAddress: string,
    count: BigNumberish,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lastPriceList(address,uint256)"(
    tokenAddress: string,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  "latestPriceAndTriggeredPriceInfo(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      latestPriceBlockNumber: BigNumber;
      latestPriceValue: BigNumber;
      triggeredPriceBlockNumber: BigNumber;
      triggeredPriceValue: BigNumber;
      triggeredAvgPrice: BigNumber;
      triggeredSigmaSQ: BigNumber;
    }
  >;

  "latestPriceAndTriggeredPriceInfo(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPrice2(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
    }
  >;

  "triggeredPrice2(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPriceInfo2(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "triggeredPriceInfo2(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      blockNumber: BigNumber;
      price: BigNumber;
      avgPrice: BigNumber;
      sigmaSQ: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
      ntokenAvgPrice: BigNumber;
      ntokenSigmaSQ: BigNumber;
    }
  >;

  "latestPrice2(address,address)"(
    tokenAddress: string,
    paybackAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "latestPrice2(address)"(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
    }
  >;

  callStatic: {
    _governance(overrides?: CallOverrides): Promise<string>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      nestGovernanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        singleFee: BigNumberish;
        doubleFee: BigNumberish;
        normalFlag: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [number, number, number] & {
        singleFee: number;
        doubleFee: number;
        normalFlag: number;
      }
    >;

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNestQuery(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getTokenFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    "triggeredPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "triggeredPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "triggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    "triggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    "findPrice(address,uint256)"(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "findPrice(address,uint256,address)"(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "latestPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "latestPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    "lastPriceList(address,uint256,address)"(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "lastPriceList(address,uint256)"(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "latestPriceAndTriggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber;
        latestPriceValue: BigNumber;
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    "latestPriceAndTriggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber;
        latestPriceValue: BigNumber;
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    "triggeredPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    "triggeredPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    "triggeredPriceInfo2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
        ntokenAvgPrice: BigNumber;
        ntokenSigmaSQ: BigNumber;
      }
    >;

    "triggeredPriceInfo2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
        ntokenAvgPrice: BigNumber;
        ntokenSigmaSQ: BigNumber;
      }
    >;

    "latestPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    "latestPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    _governance(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      config: {
        singleFee: BigNumberish;
        doubleFee: BigNumberish;
        normalFlag: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getAddressFlag(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNestQuery(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTokenFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPrice(address,uint256)"(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "findPrice(address,uint256,address)"(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "latestPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lastPriceList(address,uint256,address)"(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lastPriceList(address,uint256)"(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestPriceAndTriggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestPriceAndTriggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "triggeredPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPriceInfo2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "triggeredPriceInfo2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "latestPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "latestPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        singleFee: BigNumberish;
        doubleFee: BigNumberish;
        normalFlag: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAddressFlag(
      addr: string,
      flag: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getAddressFlag(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNestQuery(
      tokenAddress: string,
      nestQueryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNestQuery(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTokenFee(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triggeredPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findPrice(address,uint256)"(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "findPrice(address,uint256,address)"(
      tokenAddress: string,
      height: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "latestPrice(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestPrice(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lastPriceList(address,uint256,address)"(
      tokenAddress: string,
      count: BigNumberish,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lastPriceList(address,uint256)"(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestPriceAndTriggeredPriceInfo(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestPriceAndTriggeredPriceInfo(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "triggeredPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "triggeredPriceInfo2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "latestPrice2(address,address)"(
      tokenAddress: string,
      paybackAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "latestPrice2(address)"(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
