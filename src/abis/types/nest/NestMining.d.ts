/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface NestMiningInterface extends ethers.utils.Interface {
  functions: {
    "_governance()": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "update(address)": FunctionFragment;
    "setConfig(tuple)": FunctionFragment;
    "getConfig()": FunctionFragment;
    "resetNTokenCache(address)": FunctionFragment;
    "setNTokenAddress(address,address)": FunctionFragment;
    "getNTokenAddress(address)": FunctionFragment;
    "post(address,uint256,uint256)": FunctionFragment;
    "post2(address,uint256,uint256,uint256)": FunctionFragment;
    "takeToken(address,uint256,uint256,uint256)": FunctionFragment;
    "takeEth(address,uint256,uint256,uint256)": FunctionFragment;
    "close(address,uint256)": FunctionFragment;
    "closeList(address,uint256[])": FunctionFragment;
    "closeList2(address,uint256[],uint256[])": FunctionFragment;
    "stat(address)": FunctionFragment;
    "settle(address)": FunctionFragment;
    "list(address,uint256,uint256,uint256)": FunctionFragment;
    "estimate(address)": FunctionFragment;
    "getMinedBlocks(address,uint256)": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "balanceOf(address,address)": FunctionFragment;
    "indexAddress(uint256)": FunctionFragment;
    "getAccountIndex(address)": FunctionFragment;
    "getAccountCount()": FunctionFragment;
    "triggeredPrice(address)": FunctionFragment;
    "triggeredPriceInfo(address)": FunctionFragment;
    "findPrice(address,uint256)": FunctionFragment;
    "latestPrice(address)": FunctionFragment;
    "lastPriceList(address,uint256)": FunctionFragment;
    "latestPriceAndTriggeredPriceInfo(address)": FunctionFragment;
    "triggeredPrice2(address)": FunctionFragment;
    "triggeredPriceInfo2(address)": FunctionFragment;
    "latestPrice2(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(functionFragment: "update", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setConfig",
    values: [
      {
        postEthUnit: BigNumberish;
        postFeeUnit: BigNumberish;
        minerNestReward: BigNumberish;
        minerNTokenReward: BigNumberish;
        doublePostThreshold: BigNumberish;
        ntokenMinedBlockLimit: BigNumberish;
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "getConfig", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "resetNTokenCache",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNTokenAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getNTokenAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "post2",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeToken",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "takeEth",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeList",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeList2",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "stat", values: [string]): string;
  encodeFunctionData(functionFragment: "settle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "list",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "estimate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getMinedBlocks",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "indexAddress",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountIndex",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPrice",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPriceInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "findPrice",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "latestPrice", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lastPriceList",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPriceAndTriggeredPriceInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPrice2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "triggeredPriceInfo2",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "latestPrice2",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "_governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setConfig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getConfig", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resetNTokenCache",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "takeEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "closeList2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stat", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "settle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "list", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "estimate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMinedBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "indexAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAccountCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "findPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastPriceList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPriceAndTriggeredPriceInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPrice2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "triggeredPriceInfo2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "latestPrice2",
    data: BytesLike
  ): Result;

  events: {
    "Post(address,address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Post"): EventFragment;
}

export class NestMining extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: NestMiningInterface;

  functions: {
    _governance(overrides?: CallOverrides): Promise<[string]>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setConfig(
      config: {
        postEthUnit: BigNumberish;
        postFeeUnit: BigNumberish;
        minerNestReward: BigNumberish;
        minerNTokenReward: BigNumberish;
        doublePostThreshold: BigNumberish;
        ntokenMinedBlockLimit: BigNumberish;
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number
        ] & {
          postEthUnit: number;
          postFeeUnit: number;
          minerNestReward: number;
          minerNTokenReward: number;
          doublePostThreshold: number;
          ntokenMinedBlockLimit: number;
          maxBiteNestedLevel: number;
          priceEffectSpan: number;
          pledgeNest: number;
        }
      ]
    >;

    resetNTokenCache(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    post(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    post2(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      ntokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeToken(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    takeEth(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    close(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeList(
      tokenAddress: string,
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeList2(
      tokenAddress: string,
      tokenIndices: BigNumberish[],
      ntokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stat(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    list(
      tokenAddress: string,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        ([
          number,
          string,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          BigNumber
        ] & {
          index: number;
          miner: string;
          height: number;
          remainNum: number;
          ethNumBal: number;
          tokenNumBal: number;
          nestNum1k: number;
          level: number;
          shares: number;
          price: BigNumber;
        })[]
      ]
    >;

    estimate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinedBlocks(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minedBlocks: BigNumber;
        totalShares: BigNumber;
      }
    >;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAccountCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    triggeredPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    triggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    latestPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber;
        latestPriceValue: BigNumber;
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    triggeredPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    triggeredPriceInfo2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
        ntokenAvgPrice: BigNumber;
        ntokenSigmaSQ: BigNumber;
      }
    >;

    latestPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;
  };

  _governance(overrides?: CallOverrides): Promise<string>;

  migrate(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    nestGovernanceAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setConfig(
    config: {
      postEthUnit: BigNumberish;
      postFeeUnit: BigNumberish;
      minerNestReward: BigNumberish;
      minerNTokenReward: BigNumberish;
      doublePostThreshold: BigNumberish;
      ntokenMinedBlockLimit: BigNumberish;
      maxBiteNestedLevel: BigNumberish;
      priceEffectSpan: BigNumberish;
      pledgeNest: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getConfig(
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number, number, number, number, number, number] & {
      postEthUnit: number;
      postFeeUnit: number;
      minerNestReward: number;
      minerNTokenReward: number;
      doublePostThreshold: number;
      ntokenMinedBlockLimit: number;
      maxBiteNestedLevel: number;
      priceEffectSpan: number;
      pledgeNest: number;
    }
  >;

  resetNTokenCache(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNTokenAddress(
    tokenAddress: string,
    ntokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getNTokenAddress(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  post(
    tokenAddress: string,
    ethNum: BigNumberish,
    tokenAmountPerEth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  post2(
    tokenAddress: string,
    ethNum: BigNumberish,
    tokenAmountPerEth: BigNumberish,
    ntokenAmountPerEth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeToken(
    tokenAddress: string,
    index: BigNumberish,
    takeNum: BigNumberish,
    newTokenAmountPerEth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  takeEth(
    tokenAddress: string,
    index: BigNumberish,
    takeNum: BigNumberish,
    newTokenAmountPerEth: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  close(
    tokenAddress: string,
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeList(
    tokenAddress: string,
    indices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeList2(
    tokenAddress: string,
    tokenIndices: BigNumberish[],
    ntokenIndices: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stat(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  settle(
    tokenAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  list(
    tokenAddress: string,
    offset: BigNumberish,
    count: BigNumberish,
    order: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    ([
      number,
      string,
      number,
      number,
      number,
      number,
      number,
      number,
      number,
      BigNumber
    ] & {
      index: number;
      miner: string;
      height: number;
      remainNum: number;
      ethNumBal: number;
      tokenNumBal: number;
      nestNum1k: number;
      level: number;
      shares: number;
      price: BigNumber;
    })[]
  >;

  estimate(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

  getMinedBlocks(
    tokenAddress: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { minedBlocks: BigNumber; totalShares: BigNumber }
  >;

  withdraw(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    tokenAddress: string,
    addr: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  indexAddress(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getAccountIndex(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

  getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

  triggeredPrice(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  triggeredPriceInfo(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      avgPrice: BigNumber;
      sigmaSQ: BigNumber;
    }
  >;

  findPrice(
    tokenAddress: string,
    height: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  latestPrice(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
  >;

  lastPriceList(
    tokenAddress: string,
    count: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  latestPriceAndTriggeredPriceInfo(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      latestPriceBlockNumber: BigNumber;
      latestPriceValue: BigNumber;
      triggeredPriceBlockNumber: BigNumber;
      triggeredPriceValue: BigNumber;
      triggeredAvgPrice: BigNumber;
      triggeredSigmaSQ: BigNumber;
    }
  >;

  triggeredPrice2(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
    }
  >;

  triggeredPriceInfo2(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      blockNumber: BigNumber;
      price: BigNumber;
      avgPrice: BigNumber;
      sigmaSQ: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
      ntokenAvgPrice: BigNumber;
      ntokenSigmaSQ: BigNumber;
    }
  >;

  latestPrice2(
    tokenAddress: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      blockNumber: BigNumber;
      price: BigNumber;
      ntokenBlockNumber: BigNumber;
      ntokenPrice: BigNumber;
    }
  >;

  callStatic: {
    _governance(overrides?: CallOverrides): Promise<string>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update(
      nestGovernanceAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setConfig(
      config: {
        postEthUnit: BigNumberish;
        postFeeUnit: BigNumberish;
        minerNestReward: BigNumberish;
        minerNTokenReward: BigNumberish;
        doublePostThreshold: BigNumberish;
        ntokenMinedBlockLimit: BigNumberish;
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    getConfig(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number
      ] & {
        postEthUnit: number;
        postFeeUnit: number;
        minerNestReward: number;
        minerNTokenReward: number;
        doublePostThreshold: number;
        ntokenMinedBlockLimit: number;
        maxBiteNestedLevel: number;
        priceEffectSpan: number;
        pledgeNest: number;
      }
    >;

    resetNTokenCache(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    post(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    post2(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      ntokenAmountPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeToken(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    takeEth(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    close(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    closeList(
      tokenAddress: string,
      indices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeList2(
      tokenAddress: string,
      tokenIndices: BigNumberish[],
      ntokenIndices: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    stat(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    settle(tokenAddress: string, overrides?: CallOverrides): Promise<void>;

    list(
      tokenAddress: string,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      ([
        number,
        string,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        BigNumber
      ] & {
        index: number;
        miner: string;
        height: number;
        remainNum: number;
        ethNumBal: number;
        tokenNumBal: number;
        nestNum1k: number;
        level: number;
        shares: number;
        price: BigNumber;
      })[]
    >;

    estimate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlocks(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        minedBlocks: BigNumber;
        totalShares: BigNumber;
      }
    >;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

    triggeredPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    triggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
      }
    >;

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    latestPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { blockNumber: BigNumber; price: BigNumber }
    >;

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        latestPriceBlockNumber: BigNumber;
        latestPriceValue: BigNumber;
        triggeredPriceBlockNumber: BigNumber;
        triggeredPriceValue: BigNumber;
        triggeredAvgPrice: BigNumber;
        triggeredSigmaSQ: BigNumber;
      }
    >;

    triggeredPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;

    triggeredPriceInfo2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        blockNumber: BigNumber;
        price: BigNumber;
        avgPrice: BigNumber;
        sigmaSQ: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
        ntokenAvgPrice: BigNumber;
        ntokenSigmaSQ: BigNumber;
      }
    >;

    latestPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        blockNumber: BigNumber;
        price: BigNumber;
        ntokenBlockNumber: BigNumber;
        ntokenPrice: BigNumber;
      }
    >;
  };

  filters: {
    Post(
      tokenAddress?: null,
      miner?: null,
      index?: null,
      ethNum?: null,
      price?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        tokenAddress: string;
        miner: string;
        index: BigNumber;
        ethNum: BigNumber;
        price: BigNumber;
      }
    >;
  };

  estimateGas: {
    _governance(overrides?: CallOverrides): Promise<BigNumber>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setConfig(
      config: {
        postEthUnit: BigNumberish;
        postFeeUnit: BigNumberish;
        minerNestReward: BigNumberish;
        minerNTokenReward: BigNumberish;
        doublePostThreshold: BigNumberish;
        ntokenMinedBlockLimit: BigNumberish;
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getConfig(overrides?: CallOverrides): Promise<BigNumber>;

    resetNTokenCache(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    post(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    post2(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      ntokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeToken(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    takeEth(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    close(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeList(
      tokenAddress: string,
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeList2(
      tokenAddress: string,
      tokenIndices: BigNumberish[],
      ntokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stat(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    list(
      tokenAddress: string,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    estimate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinedBlocks(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAccountCount(overrides?: CallOverrides): Promise<BigNumber>;

    triggeredPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggeredPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    triggeredPriceInfo2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    latestPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      nestGovernanceAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setConfig(
      config: {
        postEthUnit: BigNumberish;
        postFeeUnit: BigNumberish;
        minerNestReward: BigNumberish;
        minerNTokenReward: BigNumberish;
        doublePostThreshold: BigNumberish;
        ntokenMinedBlockLimit: BigNumberish;
        maxBiteNestedLevel: BigNumberish;
        priceEffectSpan: BigNumberish;
        pledgeNest: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getConfig(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    resetNTokenCache(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNTokenAddress(
      tokenAddress: string,
      ntokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getNTokenAddress(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    post(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    post2(
      tokenAddress: string,
      ethNum: BigNumberish,
      tokenAmountPerEth: BigNumberish,
      ntokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeToken(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    takeEth(
      tokenAddress: string,
      index: BigNumberish,
      takeNum: BigNumberish,
      newTokenAmountPerEth: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    close(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeList(
      tokenAddress: string,
      indices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeList2(
      tokenAddress: string,
      tokenIndices: BigNumberish[],
      ntokenIndices: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stat(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    settle(
      tokenAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    list(
      tokenAddress: string,
      offset: BigNumberish,
      count: BigNumberish,
      order: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    estimate(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinedBlocks(
      tokenAddress: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      tokenAddress: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    indexAddress(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountIndex(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAccountCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    triggeredPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    findPrice(
      tokenAddress: string,
      height: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPrice(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastPriceList(
      tokenAddress: string,
      count: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPriceAndTriggeredPriceInfo(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggeredPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    triggeredPriceInfo2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    latestPrice2(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
