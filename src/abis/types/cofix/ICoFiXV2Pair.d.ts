/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ICoFiXV2PairInterface extends ethers.utils.Interface {
  functions: {
    'DOMAIN_SEPARATOR()': FunctionFragment
    'PERMIT_TYPEHASH()': FunctionFragment
    'allowance(address,address)': FunctionFragment
    'approve(address,uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'decimals()': FunctionFragment
    'nonces(address)': FunctionFragment
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment
    'totalSupply()': FunctionFragment
    'transfer(address,uint256)': FunctionFragment
    'transferFrom(address,address,uint256)': FunctionFragment
    'MINIMUM_LIQUIDITY()': FunctionFragment
    'factory()': FunctionFragment
    'token0()': FunctionFragment
    'token1()': FunctionFragment
    'getReserves()': FunctionFragment
    'mint(address,uint256,uint256)': FunctionFragment
    'burn(address,address)': FunctionFragment
    'swapWithExact(address,address)': FunctionFragment
    'skim(address)': FunctionFragment
    'sync()': FunctionFragment
    'initialize(address,address,string,string,uint256,uint256)': FunctionFragment
    'getNAVPerShare(uint256,uint256)': FunctionFragment
    'getInitialAssetRatio()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'DOMAIN_SEPARATOR', values?: undefined): string
  encodeFunctionData(functionFragment: 'PERMIT_TYPEHASH', values?: undefined): string
  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'decimals', values?: undefined): string
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'MINIMUM_LIQUIDITY', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string
  encodeFunctionData(functionFragment: 'getReserves', values?: undefined): string
  encodeFunctionData(functionFragment: 'mint', values: [string, BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'burn', values: [string, string]): string
  encodeFunctionData(functionFragment: 'swapWithExact', values: [string, string]): string
  encodeFunctionData(functionFragment: 'skim', values: [string]): string
  encodeFunctionData(functionFragment: 'sync', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'initialize',
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'getNAVPerShare', values: [BigNumberish, BigNumberish]): string
  encodeFunctionData(functionFragment: 'getInitialAssetRatio', values?: undefined): string

  decodeFunctionResult(functionFragment: 'DOMAIN_SEPARATOR', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'PERMIT_TYPEHASH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'decimals', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'MINIMUM_LIQUIDITY', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReserves', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapWithExact', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'skim', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'sync', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getNAVPerShare', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getInitialAssetRatio', data: BytesLike): Result

  events: {
    'Approval(address,address,uint256)': EventFragment
    'Burn(address,address,uint256,address)': EventFragment
    'Mint(address,uint256,uint256)': EventFragment
    'Swap(address,uint256,uint256,address,address)': EventFragment
    'Sync(uint112,uint112)': EventFragment
    'Transfer(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Burn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Mint'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Swap'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Sync'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment
}

export class ICoFiXV2Pair extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ICoFiXV2PairInterface

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    decimals(overrides?: CallOverrides): Promise<[number]>

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<[BigNumber]>

    factory(overrides?: CallOverrides): Promise<[string]>

    token0(overrides?: CallOverrides): Promise<[string]>

    token1(overrides?: CallOverrides): Promise<[string]>

    getReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }>

    mint(
      to: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    burn(
      tokenTo: string,
      ethTo: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapWithExact(
      outToken: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    skim(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getNAVPerShare(
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { navps: BigNumber }>

    getInitialAssetRatio(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        _initToken0Amount: BigNumber
        _initToken1Amount: BigNumber
      }
    >
  }

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  decimals(overrides?: CallOverrides): Promise<number>

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  transferFrom(
    from: string,
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

  factory(overrides?: CallOverrides): Promise<string>

  token0(overrides?: CallOverrides): Promise<string>

  token1(overrides?: CallOverrides): Promise<string>

  getReserves(overrides?: CallOverrides): Promise<[BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }>

  mint(
    to: string,
    amountETH: BigNumberish,
    amountToken: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  burn(
    tokenTo: string,
    ethTo: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapWithExact(
    outToken: string,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  skim(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  initialize(
    arg0: string,
    arg1: string,
    arg2: string,
    arg3: string,
    arg4: BigNumberish,
    arg5: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getNAVPerShare(ethAmount: BigNumberish, erc20Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  getInitialAssetRatio(overrides?: CallOverrides): Promise<
    [BigNumber, BigNumber] & {
      _initToken0Amount: BigNumber
      _initToken1Amount: BigNumber
    }
  >

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(spender: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<number>

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    transferFrom(from: string, to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<string>

    token0(overrides?: CallOverrides): Promise<string>

    token1(overrides?: CallOverrides): Promise<string>

    getReserves(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { reserve0: BigNumber; reserve1: BigNumber }>

    mint(
      to: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        liquidity: BigNumber
        oracleFeeChange: BigNumber
      }
    >

    burn(
      tokenTo: string,
      ethTo: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountTokenOut: BigNumber
        amountETHOut: BigNumber
        oracleFeeChange: BigNumber
      }
    >

    swapWithExact(
      outToken: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]] & {
        amountIn: BigNumber
        amountOut: BigNumber
        oracleFeeChange: BigNumber
        tradeInfo: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
      }
    >

    skim(to: string, overrides?: CallOverrides): Promise<void>

    sync(overrides?: CallOverrides): Promise<void>

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>

    getNAVPerShare(ethAmount: BigNumberish, erc20Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getInitialAssetRatio(overrides?: CallOverrides): Promise<
      [BigNumber, BigNumber] & {
        _initToken0Amount: BigNumber
        _initToken1Amount: BigNumber
      }
    >
  }

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>

    Burn(
      sender?: string | null,
      outToken?: null,
      outAmount?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      { sender: string; outToken: string; outAmount: BigNumber; to: string }
    >

    Mint(
      sender?: string | null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<[string, BigNumber, BigNumber], { sender: string; amount0: BigNumber; amount1: BigNumber }>

    Swap(
      sender?: string | null,
      amountIn?: null,
      amountOut?: null,
      outToken?: null,
      to?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, string],
      {
        sender: string
        amountIn: BigNumber
        amountOut: BigNumber
        outToken: string
        to: string
      }
    >

    Sync(
      reserve0?: null,
      reserve1?: null
    ): TypedEventFilter<[BigNumber, BigNumber], { reserve0: BigNumber; reserve1: BigNumber }>

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>
  }

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    decimals(overrides?: CallOverrides): Promise<BigNumber>

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    token0(overrides?: CallOverrides): Promise<BigNumber>

    token1(overrides?: CallOverrides): Promise<BigNumber>

    getReserves(overrides?: CallOverrides): Promise<BigNumber>

    mint(
      to: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    burn(
      tokenTo: string,
      ethTo: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapWithExact(
      outToken: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    skim(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getNAVPerShare(ethAmount: BigNumberish, erc20Amount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    getInitialAssetRatio(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>

    nonces(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    transferFrom(
      from: string,
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    MINIMUM_LIQUIDITY(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>

    mint(
      to: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    burn(
      tokenTo: string,
      ethTo: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapWithExact(
      outToken: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    skim(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    sync(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    initialize(
      arg0: string,
      arg1: string,
      arg2: string,
      arg3: string,
      arg4: BigNumberish,
      arg5: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getNAVPerShare(
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    getInitialAssetRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
