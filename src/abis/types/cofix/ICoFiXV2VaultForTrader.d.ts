/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ICoFiXV2VaultForTraderInterface extends ethers.utils.Interface {
  functions: {
    'setGovernance(address)': FunctionFragment
    'setExpectedYieldRatio(uint256)': FunctionFragment
    'setLRatio(uint256)': FunctionFragment
    'setTheta(uint256)': FunctionFragment
    'setCofiRate(uint256)': FunctionFragment
    'allowRouter(address)': FunctionFragment
    'disallowRouter(address)': FunctionFragment
    'calcMiningRate(address,uint256)': FunctionFragment
    'calcNeededETHAmountForAdjustment(address,uint256,uint256,uint256,uint256)': FunctionFragment
    'actualMiningAmount(address,uint256,uint256,uint256,uint256)': FunctionFragment
    'distributeReward(address,uint256,uint256,address)': FunctionFragment
    'clearPendingRewardOfCNode()': FunctionFragment
    'clearPendingRewardOfLP(address)': FunctionFragment
    'getPendingRewardOfCNode()': FunctionFragment
    'getPendingRewardOfLP(address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'setGovernance', values: [string]): string
  encodeFunctionData(functionFragment: 'setExpectedYieldRatio', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setLRatio', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setTheta', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'setCofiRate', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'allowRouter', values: [string]): string
  encodeFunctionData(functionFragment: 'disallowRouter', values: [string]): string
  encodeFunctionData(functionFragment: 'calcMiningRate', values: [string, BigNumberish]): string
  encodeFunctionData(
    functionFragment: 'calcNeededETHAmountForAdjustment',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'actualMiningAmount',
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'distributeReward', values: [string, BigNumberish, BigNumberish, string]): string
  encodeFunctionData(functionFragment: 'clearPendingRewardOfCNode', values?: undefined): string
  encodeFunctionData(functionFragment: 'clearPendingRewardOfLP', values: [string]): string
  encodeFunctionData(functionFragment: 'getPendingRewardOfCNode', values?: undefined): string
  encodeFunctionData(functionFragment: 'getPendingRewardOfLP', values: [string]): string

  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setExpectedYieldRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setLRatio', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setTheta', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setCofiRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'allowRouter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'disallowRouter', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcMiningRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'calcNeededETHAmountForAdjustment', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'actualMiningAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'distributeReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clearPendingRewardOfCNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'clearPendingRewardOfLP', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPendingRewardOfCNode', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPendingRewardOfLP', data: BytesLike): Result

  events: {
    'ClearPendingRewardOfCNode(uint256)': EventFragment
    'ClearPendingRewardOfLP(uint256)': EventFragment
    'RouterAllowed(address)': EventFragment
    'RouterDisallowed(address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ClearPendingRewardOfCNode'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ClearPendingRewardOfLP'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RouterAllowed'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RouterDisallowed'): EventFragment
}

export class ICoFiXV2VaultForTrader extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ICoFiXV2VaultForTraderInterface

  functions: {
    setGovernance(
      gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setExpectedYieldRatio(
      r: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setLRatio(
      lRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setTheta(
      theta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    setCofiRate(
      cofiRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    allowRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    disallowRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    calcMiningRate(pair: string, neededETHAmount: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>

    calcNeededETHAmountForAdjustment(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>

    actualMiningAmount(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        totalAccruedAmount: BigNumber
        neededETHAmount: BigNumber
      }
    >

    distributeReward(
      pair: string,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      rewardTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    clearPendingRewardOfCNode(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    clearPendingRewardOfLP(
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    getPendingRewardOfCNode(overrides?: CallOverrides): Promise<[BigNumber]>

    getPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<[BigNumber]>
  }

  setGovernance(gov: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  setExpectedYieldRatio(
    r: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setLRatio(
    lRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setTheta(
    theta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  setCofiRate(
    cofiRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  allowRouter(router: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  disallowRouter(
    router: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  calcMiningRate(pair: string, neededETHAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

  calcNeededETHAmountForAdjustment(
    pair: string,
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    ethAmount: BigNumberish,
    erc20Amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>

  actualMiningAmount(
    pair: string,
    reserve0: BigNumberish,
    reserve1: BigNumberish,
    ethAmount: BigNumberish,
    erc20Amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      amount: BigNumber
      totalAccruedAmount: BigNumber
      neededETHAmount: BigNumber
    }
  >

  distributeReward(
    pair: string,
    ethAmount: BigNumberish,
    erc20Amount: BigNumberish,
    rewardTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  clearPendingRewardOfCNode(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  clearPendingRewardOfLP(
    pair: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  getPendingRewardOfCNode(overrides?: CallOverrides): Promise<BigNumber>

  getPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    setGovernance(gov: string, overrides?: CallOverrides): Promise<void>

    setExpectedYieldRatio(r: BigNumberish, overrides?: CallOverrides): Promise<void>

    setLRatio(lRatio: BigNumberish, overrides?: CallOverrides): Promise<void>

    setTheta(theta: BigNumberish, overrides?: CallOverrides): Promise<void>

    setCofiRate(cofiRate: BigNumberish, overrides?: CallOverrides): Promise<void>

    allowRouter(router: string, overrides?: CallOverrides): Promise<void>

    disallowRouter(router: string, overrides?: CallOverrides): Promise<void>

    calcMiningRate(pair: string, neededETHAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    calcNeededETHAmountForAdjustment(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    actualMiningAmount(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amount: BigNumber
        totalAccruedAmount: BigNumber
        neededETHAmount: BigNumber
      }
    >

    distributeReward(
      pair: string,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      rewardTo: string,
      overrides?: CallOverrides
    ): Promise<void>

    clearPendingRewardOfCNode(overrides?: CallOverrides): Promise<void>

    clearPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<void>

    getPendingRewardOfCNode(overrides?: CallOverrides): Promise<BigNumber>

    getPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    ClearPendingRewardOfCNode(pendingAmount?: null): TypedEventFilter<[BigNumber], { pendingAmount: BigNumber }>

    ClearPendingRewardOfLP(pendingAmount?: null): TypedEventFilter<[BigNumber], { pendingAmount: BigNumber }>

    RouterAllowed(router?: null): TypedEventFilter<[string], { router: string }>

    RouterDisallowed(router?: null): TypedEventFilter<[string], { router: string }>
  }

  estimateGas: {
    setGovernance(gov: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setExpectedYieldRatio(
      r: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    setLRatio(lRatio: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setTheta(theta: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    setCofiRate(cofiRate: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    allowRouter(router: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    disallowRouter(router: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    calcMiningRate(pair: string, neededETHAmount: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    calcNeededETHAmountForAdjustment(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    actualMiningAmount(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    distributeReward(
      pair: string,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      rewardTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    clearPendingRewardOfCNode(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    clearPendingRewardOfLP(
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    getPendingRewardOfCNode(overrides?: CallOverrides): Promise<BigNumber>

    getPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    setGovernance(
      gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setExpectedYieldRatio(
      r: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setLRatio(
      lRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setTheta(
      theta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    setCofiRate(
      cofiRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    allowRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    disallowRouter(
      router: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    calcMiningRate(
      pair: string,
      neededETHAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    calcNeededETHAmountForAdjustment(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    actualMiningAmount(
      pair: string,
      reserve0: BigNumberish,
      reserve1: BigNumberish,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    distributeReward(
      pair: string,
      ethAmount: BigNumberish,
      erc20Amount: BigNumberish,
      rewardTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    clearPendingRewardOfCNode(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    clearPendingRewardOfLP(
      pair: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    getPendingRewardOfCNode(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPendingRewardOfLP(pair: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
