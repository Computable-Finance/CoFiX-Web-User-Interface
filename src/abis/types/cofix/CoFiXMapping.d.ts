/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CoFiXMappingInterface extends ethers.utils.Interface {
  functions: {
    "_governance()": FunctionFragment;
    "checkAddress(string)": FunctionFragment;
    "getBuiltinAddress()": FunctionFragment;
    "getCoFiNodeAddress()": FunctionFragment;
    "getCoFiTokenAddress()": FunctionFragment;
    "getCoFiXControllerAddress()": FunctionFragment;
    "getCoFiXDAOAddress()": FunctionFragment;
    "getCoFiXRouterAddress()": FunctionFragment;
    "getCoFiXVaultForStakingAddress()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "migrate(address,uint256)": FunctionFragment;
    "registerAddress(string,address)": FunctionFragment;
    "setBuiltinAddress(address,address,address,address,address,address)": FunctionFragment;
    "update(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_governance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getBuiltinAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiNodeAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiXControllerAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiXDAOAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiXRouterAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCoFiXVaultForStakingAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;
  encodeFunctionData(
    functionFragment: "migrate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAddress",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setBuiltinAddress",
    values: [string, string, string, string, string, string]
  ): string;
  encodeFunctionData(functionFragment: "update", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "_governance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBuiltinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiNodeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiXControllerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiXDAOAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiXRouterAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoFiXVaultForStakingAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "migrate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBuiltinAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;

  events: {};
}

export class CoFiXMapping extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CoFiXMappingInterface;

  functions: {
    _governance(overrides?: CallOverrides): Promise<[string]>;

    checkAddress(key: string, overrides?: CallOverrides): Promise<[string]>;

    getBuiltinAddress(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        cofiToken: string;
        cofiNode: string;
        cofixDAO: string;
        cofixRouter: string;
        cofixController: string;
        cofixVaultForStaking: string;
      }
    >;

    getCoFiNodeAddress(overrides?: CallOverrides): Promise<[string]>;

    getCoFiTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    getCoFiXControllerAddress(overrides?: CallOverrides): Promise<[string]>;

    getCoFiXDAOAddress(overrides?: CallOverrides): Promise<[string]>;

    getCoFiXRouterAddress(overrides?: CallOverrides): Promise<[string]>;

    getCoFiXVaultForStakingAddress(
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAddress(
      key: string,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBuiltinAddress(
      cofiToken: string,
      cofiNode: string,
      cofixDAO: string,
      cofixRouter: string,
      cofixController: string,
      cofixVaultForStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _governance(overrides?: CallOverrides): Promise<string>;

  checkAddress(key: string, overrides?: CallOverrides): Promise<string>;

  getBuiltinAddress(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string] & {
      cofiToken: string;
      cofiNode: string;
      cofixDAO: string;
      cofixRouter: string;
      cofixController: string;
      cofixVaultForStaking: string;
    }
  >;

  getCoFiNodeAddress(overrides?: CallOverrides): Promise<string>;

  getCoFiTokenAddress(overrides?: CallOverrides): Promise<string>;

  getCoFiXControllerAddress(overrides?: CallOverrides): Promise<string>;

  getCoFiXDAOAddress(overrides?: CallOverrides): Promise<string>;

  getCoFiXRouterAddress(overrides?: CallOverrides): Promise<string>;

  getCoFiXVaultForStakingAddress(overrides?: CallOverrides): Promise<string>;

  initialize(
    governance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  migrate(
    tokenAddress: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAddress(
    key: string,
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBuiltinAddress(
    cofiToken: string,
    cofiNode: string,
    cofixDAO: string,
    cofixRouter: string,
    cofixController: string,
    cofixVaultForStaking: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  update(
    newGovernance: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _governance(overrides?: CallOverrides): Promise<string>;

    checkAddress(key: string, overrides?: CallOverrides): Promise<string>;

    getBuiltinAddress(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, string, string] & {
        cofiToken: string;
        cofiNode: string;
        cofixDAO: string;
        cofixRouter: string;
        cofixController: string;
        cofixVaultForStaking: string;
      }
    >;

    getCoFiNodeAddress(overrides?: CallOverrides): Promise<string>;

    getCoFiTokenAddress(overrides?: CallOverrides): Promise<string>;

    getCoFiXControllerAddress(overrides?: CallOverrides): Promise<string>;

    getCoFiXDAOAddress(overrides?: CallOverrides): Promise<string>;

    getCoFiXRouterAddress(overrides?: CallOverrides): Promise<string>;

    getCoFiXVaultForStakingAddress(overrides?: CallOverrides): Promise<string>;

    initialize(governance: string, overrides?: CallOverrides): Promise<void>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    registerAddress(
      key: string,
      addr: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setBuiltinAddress(
      cofiToken: string,
      cofiNode: string,
      cofixDAO: string,
      cofixRouter: string,
      cofixController: string,
      cofixVaultForStaking: string,
      overrides?: CallOverrides
    ): Promise<void>;

    update(newGovernance: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    _governance(overrides?: CallOverrides): Promise<BigNumber>;

    checkAddress(key: string, overrides?: CallOverrides): Promise<BigNumber>;

    getBuiltinAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiNodeAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiXControllerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiXDAOAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiXRouterAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getCoFiXVaultForStakingAddress(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAddress(
      key: string,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBuiltinAddress(
      cofiToken: string,
      cofiNode: string,
      cofixDAO: string,
      cofixRouter: string,
      cofixController: string,
      cofixVaultForStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _governance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    checkAddress(
      key: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getBuiltinAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCoFiNodeAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoFiTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoFiXControllerAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoFiXDAOAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoFiXRouterAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCoFiXVaultForStakingAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      governance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    migrate(
      tokenAddress: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAddress(
      key: string,
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBuiltinAddress(
      cofiToken: string,
      cofiNode: string,
      cofixDAO: string,
      cofixRouter: string,
      cofixController: string,
      cofixVaultForStaking: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    update(
      newGovernance: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
