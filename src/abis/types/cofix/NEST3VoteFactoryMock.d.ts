/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface NEST3VoteFactoryMockInterface extends ethers.utils.Interface {
  functions: {
    'contractMapping(string)': FunctionFragment
    'governance()': FunctionFragment
    'setOfferPrice(address)': FunctionFragment
    'checkAddress(string)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'contractMapping', values: [string]): string
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string
  encodeFunctionData(functionFragment: 'setOfferPrice', values: [string]): string
  encodeFunctionData(functionFragment: 'checkAddress', values: [string]): string

  decodeFunctionResult(functionFragment: 'contractMapping', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setOfferPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkAddress', data: BytesLike): Result

  events: {}
}

export class NEST3VoteFactoryMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: NEST3VoteFactoryMockInterface

  functions: {
    contractMapping(arg0: string, overrides?: CallOverrides): Promise<[string]>

    governance(overrides?: CallOverrides): Promise<[string]>

    setOfferPrice(
      _offerPrice: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    checkAddress(name: string, overrides?: CallOverrides): Promise<[string] & { contractAddress: string }>
  }

  contractMapping(arg0: string, overrides?: CallOverrides): Promise<string>

  governance(overrides?: CallOverrides): Promise<string>

  setOfferPrice(
    _offerPrice: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  checkAddress(name: string, overrides?: CallOverrides): Promise<string>

  callStatic: {
    contractMapping(arg0: string, overrides?: CallOverrides): Promise<string>

    governance(overrides?: CallOverrides): Promise<string>

    setOfferPrice(_offerPrice: string, overrides?: CallOverrides): Promise<void>

    checkAddress(name: string, overrides?: CallOverrides): Promise<string>
  }

  filters: {}

  estimateGas: {
    contractMapping(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    governance(overrides?: CallOverrides): Promise<BigNumber>

    setOfferPrice(_offerPrice: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    checkAddress(name: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    contractMapping(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setOfferPrice(
      _offerPrice: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    checkAddress(name: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
