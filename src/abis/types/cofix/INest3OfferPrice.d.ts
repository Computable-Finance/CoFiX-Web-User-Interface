/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface INest3OfferPriceInterface extends ethers.utils.Interface {
  functions: {
    'transfer(address,uint256)': FunctionFragment
    'updateAndCheckPriceNow(address)': FunctionFragment
    'updateAndCheckPriceList(address,uint256)': FunctionFragment
    'activation()': FunctionFragment
    'checkPriceCostLeast(address)': FunctionFragment
    'checkPriceCostMost(address)': FunctionFragment
    'checkPriceCostSingle(address)': FunctionFragment
    'checkUseNestPrice(address)': FunctionFragment
    'checkBlocklist(address)': FunctionFragment
    'checkDestructionAmount()': FunctionFragment
    'checkEffectTime()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'updateAndCheckPriceNow', values: [string]): string
  encodeFunctionData(functionFragment: 'updateAndCheckPriceList', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'activation', values?: undefined): string
  encodeFunctionData(functionFragment: 'checkPriceCostLeast', values: [string]): string
  encodeFunctionData(functionFragment: 'checkPriceCostMost', values: [string]): string
  encodeFunctionData(functionFragment: 'checkPriceCostSingle', values: [string]): string
  encodeFunctionData(functionFragment: 'checkUseNestPrice', values: [string]): string
  encodeFunctionData(functionFragment: 'checkBlocklist', values: [string]): string
  encodeFunctionData(functionFragment: 'checkDestructionAmount', values?: undefined): string
  encodeFunctionData(functionFragment: 'checkEffectTime', values?: undefined): string

  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateAndCheckPriceNow', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'updateAndCheckPriceList', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'activation', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkPriceCostLeast', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkPriceCostMost', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkPriceCostSingle', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkUseNestPrice', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkBlocklist', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkDestructionAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'checkEffectTime', data: BytesLike): Result

  events: {}
}

export class INest3OfferPrice extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: INest3OfferPriceInterface

  functions: {
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateAndCheckPriceNow(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    updateAndCheckPriceList(
      tokenAddress: string,
      num: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    activation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    checkPriceCostLeast(tokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    checkPriceCostMost(tokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    checkPriceCostSingle(tokenAddress: string, overrides?: CallOverrides): Promise<[BigNumber]>

    checkUseNestPrice(target: string, overrides?: CallOverrides): Promise<[boolean]>

    checkBlocklist(add: string, overrides?: CallOverrides): Promise<[boolean]>

    checkDestructionAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    checkEffectTime(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  transfer(
    to: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateAndCheckPriceNow(
    tokenAddress: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  updateAndCheckPriceList(
    tokenAddress: string,
    num: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  activation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  checkPriceCostLeast(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  checkPriceCostMost(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  checkPriceCostSingle(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

  checkUseNestPrice(target: string, overrides?: CallOverrides): Promise<boolean>

  checkBlocklist(add: string, overrides?: CallOverrides): Promise<boolean>

  checkDestructionAmount(overrides?: CallOverrides): Promise<BigNumber>

  checkEffectTime(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    transfer(to: string, value: BigNumberish, overrides?: CallOverrides): Promise<boolean>

    updateAndCheckPriceNow(
      tokenAddress: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        ethAmount: BigNumber
        erc20Amount: BigNumber
        blockNum: BigNumber
      }
    >

    updateAndCheckPriceList(tokenAddress: string, num: BigNumberish, overrides?: CallOverrides): Promise<BigNumber[]>

    activation(overrides?: CallOverrides): Promise<void>

    checkPriceCostLeast(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkPriceCostMost(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkPriceCostSingle(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkUseNestPrice(target: string, overrides?: CallOverrides): Promise<boolean>

    checkBlocklist(add: string, overrides?: CallOverrides): Promise<boolean>

    checkDestructionAmount(overrides?: CallOverrides): Promise<BigNumber>

    checkEffectTime(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {}

  estimateGas: {
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateAndCheckPriceNow(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    updateAndCheckPriceList(
      tokenAddress: string,
      num: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    activation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    checkPriceCostLeast(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkPriceCostMost(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkPriceCostSingle(tokenAddress: string, overrides?: CallOverrides): Promise<BigNumber>

    checkUseNestPrice(target: string, overrides?: CallOverrides): Promise<BigNumber>

    checkBlocklist(add: string, overrides?: CallOverrides): Promise<BigNumber>

    checkDestructionAmount(overrides?: CallOverrides): Promise<BigNumber>

    checkEffectTime(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    transfer(
      to: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateAndCheckPriceNow(
      tokenAddress: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    updateAndCheckPriceList(
      tokenAddress: string,
      num: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    activation(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    checkPriceCostLeast(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkPriceCostMost(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkPriceCostSingle(tokenAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkUseNestPrice(target: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkBlocklist(add: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkDestructionAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    checkEffectTime(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
