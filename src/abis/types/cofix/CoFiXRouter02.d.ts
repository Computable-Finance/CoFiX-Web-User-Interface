/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface CoFiXRouter02Interface extends ethers.utils.Interface {
  functions: {
    'WETH()': FunctionFragment
    'factory()': FunctionFragment
    'uniFactory()': FunctionFragment
    'addLiquidity(address,uint256,uint256,uint256,address,uint256)': FunctionFragment
    'addLiquidityAndStake(address,uint256,uint256,uint256,address,uint256)': FunctionFragment
    'removeLiquidityGetToken(address,uint256,uint256,address,uint256)': FunctionFragment
    'removeLiquidityGetETH(address,uint256,uint256,address,uint256)': FunctionFragment
    'swapExactETHForTokens(address,uint256,uint256,address,address,uint256)': FunctionFragment
    'swapExactTokensForTokens(address,address,uint256,uint256,address,address,uint256)': FunctionFragment
    'swapExactTokensForETH(address,uint256,uint256,address,address,uint256)': FunctionFragment
    'hybridSwapExactTokensForTokens(uint256,uint256,address[],uint8[],address,address,uint256)': FunctionFragment
    'hybridSwapExactETHForTokens(uint256,uint256,address[],uint8[],address,address,uint256)': FunctionFragment
    'hybridSwapExactTokensForETH(uint256,uint256,address[],uint8[],address,address,uint256)': FunctionFragment
    'isCoFiXNativeSupported(address,address)': FunctionFragment
    'getPairForDEX(address,address,uint8)': FunctionFragment
    'hybridPair(address,address)': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'WETH', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'uniFactory', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'addLiquidity',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'addLiquidityAndStake',
    values: [string, BigNumberish, BigNumberish, BigNumberish, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeLiquidityGetToken',
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'removeLiquidityGetETH',
    values: [string, BigNumberish, BigNumberish, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactETHForTokens',
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForTokens',
    values: [string, string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'swapExactTokensForETH',
    values: [string, BigNumberish, BigNumberish, string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'hybridSwapExactTokensForTokens',
    values: [BigNumberish, BigNumberish, string[], BigNumberish[], string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'hybridSwapExactETHForTokens',
    values: [BigNumberish, BigNumberish, string[], BigNumberish[], string, string, BigNumberish]
  ): string
  encodeFunctionData(
    functionFragment: 'hybridSwapExactTokensForETH',
    values: [BigNumberish, BigNumberish, string[], BigNumberish[], string, string, BigNumberish]
  ): string
  encodeFunctionData(functionFragment: 'isCoFiXNativeSupported', values: [string, string]): string
  encodeFunctionData(functionFragment: 'getPairForDEX', values: [string, string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'hybridPair', values: [string, string]): string

  decodeFunctionResult(functionFragment: 'WETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'uniFactory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addLiquidity', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addLiquidityAndStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeLiquidityGetToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'removeLiquidityGetETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapExactETHForTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapExactTokensForTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'swapExactTokensForETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hybridSwapExactTokensForTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hybridSwapExactETHForTokens', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hybridSwapExactTokensForETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'isCoFiXNativeSupported', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getPairForDEX', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'hybridPair', data: BytesLike): Result

  events: {}
}

export class CoFiXRouter02 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: CoFiXRouter02Interface

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>

    factory(overrides?: CallOverrides): Promise<[string]>

    uniFactory(overrides?: CallOverrides): Promise<[string]>

    addLiquidity(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    addLiquidityAndStake(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquidityGetToken(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    removeLiquidityGetETH(
      token: string,
      liquidity: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactETHForTokens(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    swapExactTokensForETH(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hybridSwapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hybridSwapExactETHForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    hybridSwapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    isCoFiXNativeSupported(
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { supported: boolean; pair: string }>

    getPairForDEX(
      input: string,
      output: string,
      dex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { pair: string }>

    hybridPair(
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { useCoFiX: boolean; pair: string }>
  }

  WETH(overrides?: CallOverrides): Promise<string>

  factory(overrides?: CallOverrides): Promise<string>

  uniFactory(overrides?: CallOverrides): Promise<string>

  addLiquidity(
    token: string,
    amountETH: BigNumberish,
    amountToken: BigNumberish,
    liquidityMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  addLiquidityAndStake(
    token: string,
    amountETH: BigNumberish,
    amountToken: BigNumberish,
    liquidityMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeLiquidityGetToken(
    token: string,
    liquidity: BigNumberish,
    amountTokenMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  removeLiquidityGetETH(
    token: string,
    liquidity: BigNumberish,
    amountETHMin: BigNumberish,
    to: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactETHForTokens(
    token: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForTokens(
    tokenIn: string,
    tokenOut: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  swapExactTokensForETH(
    token: string,
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hybridSwapExactTokensForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    dexes: BigNumberish[],
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hybridSwapExactETHForTokens(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    dexes: BigNumberish[],
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  hybridSwapExactTokensForETH(
    amountIn: BigNumberish,
    amountOutMin: BigNumberish,
    path: string[],
    dexes: BigNumberish[],
    to: string,
    rewardTo: string,
    deadline: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  isCoFiXNativeSupported(
    input: string,
    output: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { supported: boolean; pair: string }>

  getPairForDEX(input: string, output: string, dex: BigNumberish, overrides?: CallOverrides): Promise<string>

  hybridPair(
    input: string,
    output: string,
    overrides?: CallOverrides
  ): Promise<[boolean, string] & { useCoFiX: boolean; pair: string }>

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>

    factory(overrides?: CallOverrides): Promise<string>

    uniFactory(overrides?: CallOverrides): Promise<string>

    addLiquidity(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    addLiquidityAndStake(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeLiquidityGetToken(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    removeLiquidityGetETH(
      token: string,
      liquidity: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    swapExactETHForTokens(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _amountIn: BigNumber; _amountOut: BigNumber }>

    swapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _amountIn: BigNumber; _amountOut: BigNumber }>

    swapExactTokensForETH(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { _amountIn: BigNumber; _amountOut: BigNumber }>

    hybridSwapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    hybridSwapExactETHForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    hybridSwapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>

    isCoFiXNativeSupported(
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { supported: boolean; pair: string }>

    getPairForDEX(input: string, output: string, dex: BigNumberish, overrides?: CallOverrides): Promise<string>

    hybridPair(
      input: string,
      output: string,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { useCoFiX: boolean; pair: string }>
  }

  filters: {}

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    uniFactory(overrides?: CallOverrides): Promise<BigNumber>

    addLiquidity(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    addLiquidityAndStake(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeLiquidityGetToken(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    removeLiquidityGetETH(
      token: string,
      liquidity: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactETHForTokens(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    swapExactTokensForETH(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hybridSwapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hybridSwapExactETHForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    hybridSwapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    isCoFiXNativeSupported(input: string, output: string, overrides?: CallOverrides): Promise<BigNumber>

    getPairForDEX(input: string, output: string, dex: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>

    hybridPair(input: string, output: string, overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    uniFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    addLiquidity(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    addLiquidityAndStake(
      token: string,
      amountETH: BigNumberish,
      amountToken: BigNumberish,
      liquidityMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeLiquidityGetToken(
      token: string,
      liquidity: BigNumberish,
      amountTokenMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    removeLiquidityGetETH(
      token: string,
      liquidity: BigNumberish,
      amountETHMin: BigNumberish,
      to: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactETHForTokens(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForTokens(
      tokenIn: string,
      tokenOut: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    swapExactTokensForETH(
      token: string,
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hybridSwapExactTokensForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hybridSwapExactETHForTokens(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    hybridSwapExactTokensForETH(
      amountIn: BigNumberish,
      amountOutMin: BigNumberish,
      path: string[],
      dexes: BigNumberish[],
      to: string,
      rewardTo: string,
      deadline: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    isCoFiXNativeSupported(input: string, output: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    getPairForDEX(
      input: string,
      output: string,
      dex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    hybridPair(input: string, output: string, overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
