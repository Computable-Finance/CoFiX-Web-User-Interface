/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface CoFiXV2DAOInterface extends ethers.utils.Interface {
  functions: {
    'cofiToken()': FunctionFragment
    'factory()': FunctionFragment
    'flag()': FunctionFragment
    'governance()': FunctionFragment
    'lastBlock()': FunctionFragment
    'lastCollectingBlock()': FunctionFragment
    'quotaAmount()': FunctionFragment
    'redeemedAmount()': FunctionFragment
    'startedBlock()': FunctionFragment
    'setGovernance(address)': FunctionFragment
    'start()': FunctionFragment
    'pause()': FunctionFragment
    'resume()': FunctionFragment
    'totalETHRewards()': FunctionFragment
    'migrateTo(address)': FunctionFragment
    'burnCofi(uint256)': FunctionFragment
    'addETHReward()': FunctionFragment
    'redeem(uint256)': FunctionFragment
    'quotaOf()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'cofiToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'flag', values?: undefined): string
  encodeFunctionData(functionFragment: 'governance', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastCollectingBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'quotaAmount', values?: undefined): string
  encodeFunctionData(functionFragment: 'redeemedAmount', values?: undefined): string
  encodeFunctionData(functionFragment: 'startedBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'setGovernance', values: [string]): string
  encodeFunctionData(functionFragment: 'start', values?: undefined): string
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string
  encodeFunctionData(functionFragment: 'resume', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalETHRewards', values?: undefined): string
  encodeFunctionData(functionFragment: 'migrateTo', values: [string]): string
  encodeFunctionData(functionFragment: 'burnCofi', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'addETHReward', values?: undefined): string
  encodeFunctionData(functionFragment: 'redeem', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'quotaOf', values?: undefined): string

  decodeFunctionResult(functionFragment: 'cofiToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'flag', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'governance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastCollectingBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quotaAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeemedAmount', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startedBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'resume', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalETHRewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'migrateTo', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'burnCofi', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addETHReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'redeem', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'quotaOf', data: BytesLike): Result

  events: {
    'CoFiBurn(address,uint256)': EventFragment
    'FlagSet(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CoFiBurn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FlagSet'): EventFragment
}

export class CoFiXV2DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: CoFiXV2DAOInterface

  functions: {
    cofiToken(overrides?: CallOverrides): Promise<[string]>

    factory(overrides?: CallOverrides): Promise<[string]>

    flag(overrides?: CallOverrides): Promise<[number]>

    governance(overrides?: CallOverrides): Promise<[string]>

    lastBlock(overrides?: CallOverrides): Promise<[number]>

    lastCollectingBlock(overrides?: CallOverrides): Promise<[number]>

    quotaAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    redeemedAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    startedBlock(overrides?: CallOverrides): Promise<[number]>

    setGovernance(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    resume(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    totalETHRewards(overrides?: CallOverrides): Promise<[BigNumber]>

    migrateTo(
      _newDAO: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    burnCofi(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    redeem(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    quotaOf(overrides?: CallOverrides): Promise<[BigNumber] & { quota: BigNumber }>
  }

  cofiToken(overrides?: CallOverrides): Promise<string>

  factory(overrides?: CallOverrides): Promise<string>

  flag(overrides?: CallOverrides): Promise<number>

  governance(overrides?: CallOverrides): Promise<string>

  lastBlock(overrides?: CallOverrides): Promise<number>

  lastCollectingBlock(overrides?: CallOverrides): Promise<number>

  quotaAmount(overrides?: CallOverrides): Promise<BigNumber>

  redeemedAmount(overrides?: CallOverrides): Promise<BigNumber>

  startedBlock(overrides?: CallOverrides): Promise<number>

  setGovernance(_new: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  resume(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  totalETHRewards(overrides?: CallOverrides): Promise<BigNumber>

  migrateTo(_newDAO: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  burnCofi(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  redeem(
    amount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  quotaOf(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    cofiToken(overrides?: CallOverrides): Promise<string>

    factory(overrides?: CallOverrides): Promise<string>

    flag(overrides?: CallOverrides): Promise<number>

    governance(overrides?: CallOverrides): Promise<string>

    lastBlock(overrides?: CallOverrides): Promise<number>

    lastCollectingBlock(overrides?: CallOverrides): Promise<number>

    quotaAmount(overrides?: CallOverrides): Promise<BigNumber>

    redeemedAmount(overrides?: CallOverrides): Promise<BigNumber>

    startedBlock(overrides?: CallOverrides): Promise<number>

    setGovernance(_new: string, overrides?: CallOverrides): Promise<void>

    start(overrides?: CallOverrides): Promise<void>

    pause(overrides?: CallOverrides): Promise<void>

    resume(overrides?: CallOverrides): Promise<void>

    totalETHRewards(overrides?: CallOverrides): Promise<BigNumber>

    migrateTo(_newDAO: string, overrides?: CallOverrides): Promise<void>

    burnCofi(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    addETHReward(overrides?: CallOverrides): Promise<void>

    redeem(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    quotaOf(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    CoFiBurn(gov?: null, amount?: null): TypedEventFilter<[string, BigNumber], { gov: string; amount: BigNumber }>

    FlagSet(gov?: null, flag?: null): TypedEventFilter<[string, BigNumber], { gov: string; flag: BigNumber }>
  }

  estimateGas: {
    cofiToken(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    flag(overrides?: CallOverrides): Promise<BigNumber>

    governance(overrides?: CallOverrides): Promise<BigNumber>

    lastBlock(overrides?: CallOverrides): Promise<BigNumber>

    lastCollectingBlock(overrides?: CallOverrides): Promise<BigNumber>

    quotaAmount(overrides?: CallOverrides): Promise<BigNumber>

    redeemedAmount(overrides?: CallOverrides): Promise<BigNumber>

    startedBlock(overrides?: CallOverrides): Promise<BigNumber>

    setGovernance(_new: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    resume(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    totalETHRewards(overrides?: CallOverrides): Promise<BigNumber>

    migrateTo(_newDAO: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    burnCofi(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>

    redeem(amount: BigNumberish, overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>

    quotaOf(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    cofiToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    flag(overrides?: CallOverrides): Promise<PopulatedTransaction>

    governance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastCollectingBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    quotaAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    redeemedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    startedBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    setGovernance(
      _new: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    resume(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    totalETHRewards(overrides?: CallOverrides): Promise<PopulatedTransaction>

    migrateTo(
      _newDAO: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    burnCofi(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    redeem(
      amount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    quotaOf(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
