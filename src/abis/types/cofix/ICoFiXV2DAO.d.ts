/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface ICoFiXV2DAOInterface extends ethers.utils.Interface {
  functions: {
    'setGovernance(address)': FunctionFragment
    'start()': FunctionFragment
    'addETHReward()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'setGovernance', values: [string]): string
  encodeFunctionData(functionFragment: 'start', values?: undefined): string
  encodeFunctionData(functionFragment: 'addETHReward', values?: undefined): string

  decodeFunctionResult(functionFragment: 'setGovernance', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'start', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'addETHReward', data: BytesLike): Result

  events: {
    'CoFiBurn(address,uint256)': EventFragment
    'FlagSet(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CoFiBurn'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'FlagSet'): EventFragment
}

export class ICoFiXV2DAO extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: ICoFiXV2DAOInterface

  functions: {
    setGovernance(
      gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>
  }

  setGovernance(gov: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  callStatic: {
    setGovernance(gov: string, overrides?: CallOverrides): Promise<void>

    start(overrides?: CallOverrides): Promise<void>

    addETHReward(overrides?: CallOverrides): Promise<void>
  }

  filters: {
    CoFiBurn(gov?: null, amount?: null): TypedEventFilter<[string, BigNumber], { gov: string; amount: BigNumber }>

    FlagSet(gov?: null, flag?: null): TypedEventFilter<[string, BigNumber], { gov: string; flag: BigNumber }>
  }

  estimateGas: {
    setGovernance(gov: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>
  }

  populateTransaction: {
    setGovernance(
      gov: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    start(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    addETHReward(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>
  }
}
