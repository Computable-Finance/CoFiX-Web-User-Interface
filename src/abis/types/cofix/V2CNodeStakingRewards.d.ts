/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers'
import { BytesLike } from '@ethersproject/bytes'
import { Listener, Provider } from '@ethersproject/providers'
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi'
import { TypedEventFilter, TypedEvent, TypedListener } from './commons'

interface V2CNodeStakingRewardsInterface extends ethers.utils.Interface {
  functions: {
    'addReward(uint256)': FunctionFragment
    'balanceOf(address)': FunctionFragment
    'earned(address)': FunctionFragment
    'emergencyWithdraw()': FunctionFragment
    'exit()': FunctionFragment
    'factory()': FunctionFragment
    'getReward()': FunctionFragment
    'getRewardAndStake()': FunctionFragment
    'lastBlockRewardApplicable()': FunctionFragment
    'lastUpdateBlock()': FunctionFragment
    'rewardPerToken()': FunctionFragment
    'rewardPerTokenStored()': FunctionFragment
    'rewards(address)': FunctionFragment
    'rewardsToken()': FunctionFragment
    'stake(uint256)': FunctionFragment
    'stakeForOther(address,uint256)': FunctionFragment
    'stakingToken()': FunctionFragment
    'totalSupply()': FunctionFragment
    'userRewardPerTokenPaid(address)': FunctionFragment
    'withdraw(uint256)': FunctionFragment
    'rewardsVault()': FunctionFragment
    'rewardRate()': FunctionFragment
    'accrued()': FunctionFragment
  }

  encodeFunctionData(functionFragment: 'addReward', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string
  encodeFunctionData(functionFragment: 'earned', values: [string]): string
  encodeFunctionData(functionFragment: 'emergencyWithdraw', values?: undefined): string
  encodeFunctionData(functionFragment: 'exit', values?: undefined): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'getReward', values?: undefined): string
  encodeFunctionData(functionFragment: 'getRewardAndStake', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastBlockRewardApplicable', values?: undefined): string
  encodeFunctionData(functionFragment: 'lastUpdateBlock', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardPerToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardPerTokenStored', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewards', values: [string]): string
  encodeFunctionData(functionFragment: 'rewardsToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'stake', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'stakeForOther', values: [string, BigNumberish]): string
  encodeFunctionData(functionFragment: 'stakingToken', values?: undefined): string
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string
  encodeFunctionData(functionFragment: 'userRewardPerTokenPaid', values: [string]): string
  encodeFunctionData(functionFragment: 'withdraw', values: [BigNumberish]): string
  encodeFunctionData(functionFragment: 'rewardsVault', values?: undefined): string
  encodeFunctionData(functionFragment: 'rewardRate', values?: undefined): string
  encodeFunctionData(functionFragment: 'accrued', values?: undefined): string

  decodeFunctionResult(functionFragment: 'addReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'earned', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'emergencyWithdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'exit', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getReward', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'getRewardAndStake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastBlockRewardApplicable', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'lastUpdateBlock', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardPerToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardPerTokenStored', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewards', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardsToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stake', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakeForOther', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stakingToken', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'userRewardPerTokenPaid', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardsVault', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rewardRate', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'accrued', data: BytesLike): Result

  events: {
    'EmergencyWithdraw(address,uint256)': EventFragment
    'RewardAdded(address,uint256)': EventFragment
    'RewardPaid(address,uint256)': EventFragment
    'Staked(address,uint256)': EventFragment
    'StakedForOther(address,address,uint256)': EventFragment
    'Withdrawn(address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'EmergencyWithdraw'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardAdded'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RewardPaid'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Staked'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StakedForOther'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'Withdrawn'): EventFragment
}

export class V2CNodeStakingRewards extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this

  listeners(eventName?: string): Array<Listener>
  off(eventName: string, listener: Listener): this
  on(eventName: string, listener: Listener): this
  once(eventName: string, listener: Listener): this
  removeListener(eventName: string, listener: Listener): this
  removeAllListeners(eventName?: string): this

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>

  interface: V2CNodeStakingRewardsInterface

  functions: {
    addReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    factory(overrides?: CallOverrides): Promise<[string]>

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    getRewardAndStake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<[BigNumber]>

    lastUpdateBlock(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardPerToken(overrides?: CallOverrides): Promise<[BigNumber]>

    rewardPerTokenStored(overrides?: CallOverrides): Promise<[BigNumber]>

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    rewardsToken(overrides?: CallOverrides): Promise<[string]>

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    stakeForOther(
      other: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    stakingToken(overrides?: CallOverrides): Promise<[string]>

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>

    userRewardPerTokenPaid(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>

    rewardsVault(overrides?: CallOverrides): Promise<[string]>

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>

    accrued(overrides?: CallOverrides): Promise<[BigNumber]>
  }

  addReward(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>

  emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  factory(overrides?: CallOverrides): Promise<string>

  getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  getRewardAndStake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

  lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>

  rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

  rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  rewardsToken(overrides?: CallOverrides): Promise<string>

  stake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>

  stakeForOther(
    other: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  stakingToken(overrides?: CallOverrides): Promise<string>

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>

  userRewardPerTokenPaid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>

  rewardsVault(overrides?: CallOverrides): Promise<string>

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>

  accrued(overrides?: CallOverrides): Promise<BigNumber>

  callStatic: {
    addReward(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>

    emergencyWithdraw(overrides?: CallOverrides): Promise<void>

    exit(overrides?: CallOverrides): Promise<void>

    factory(overrides?: CallOverrides): Promise<string>

    getReward(overrides?: CallOverrides): Promise<void>

    getRewardAndStake(overrides?: CallOverrides): Promise<void>

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    rewardsToken(overrides?: CallOverrides): Promise<string>

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    stakeForOther(other: string, amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    stakingToken(overrides?: CallOverrides): Promise<string>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    userRewardPerTokenPaid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>

    rewardsVault(overrides?: CallOverrides): Promise<string>

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>

    accrued(overrides?: CallOverrides): Promise<BigNumber>
  }

  filters: {
    EmergencyWithdraw(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>

    RewardAdded(
      sender?: null,
      reward?: null
    ): TypedEventFilter<[string, BigNumber], { sender: string; reward: BigNumber }>

    RewardPaid(
      user?: string | null,
      reward?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; reward: BigNumber }>

    Staked(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>

    StakedForOther(
      user?: string | null,
      other?: string | null,
      amount?: null
    ): TypedEventFilter<[string, string, BigNumber], { user: string; other: string; amount: BigNumber }>

    Withdrawn(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<[string, BigNumber], { user: string; amount: BigNumber }>
  }

  estimateGas: {
    addReward(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    getRewardAndStake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<BigNumber>

    lastUpdateBlock(overrides?: CallOverrides): Promise<BigNumber>

    rewardPerToken(overrides?: CallOverrides): Promise<BigNumber>

    rewardPerTokenStored(overrides?: CallOverrides): Promise<BigNumber>

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    rewardsToken(overrides?: CallOverrides): Promise<BigNumber>

    stake(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    stakeForOther(
      other: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>

    stakingToken(overrides?: CallOverrides): Promise<BigNumber>

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>

    userRewardPerTokenPaid(arg0: string, overrides?: CallOverrides): Promise<BigNumber>

    withdraw(amount: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>

    rewardsVault(overrides?: CallOverrides): Promise<BigNumber>

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>

    accrued(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    addReward(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    earned(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    emergencyWithdraw(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    exit(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    getReward(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    getRewardAndStake(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>

    lastBlockRewardApplicable(overrides?: CallOverrides): Promise<PopulatedTransaction>

    lastUpdateBlock(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardPerToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardPerTokenStored(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewards(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardsToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    stakeForOther(
      other: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    stakingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>

    userRewardPerTokenPaid(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>

    rewardsVault(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>

    accrued(overrides?: CallOverrides): Promise<PopulatedTransaction>
  }
}
